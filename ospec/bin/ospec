#!/usr/bin/env node
"use strict"

var fs = require("fs")
var path = require("path")

var o = require("../ospec")
var highlight = require("../highlight")

var hasProcess = typeof process === "object"

function traverseDirectory(pathname, callback) {
	pathname = pathname.replace(/\\/g, "/")
	return new Promise(function(resolve, reject) {
		fs.lstat(pathname, function(err, stat) {
			if (err) reject(err)
			if (stat && stat.isDirectory()) {
				fs.readdir(pathname, function(err, pathnames) {
					if (err) reject(err)
					var promises = []
					for (var i = 0; i < pathnames.length; i++) {
						if (pathnames[i] === "node_modules") continue
						if (pathnames[i][0] === ".") continue
						pathnames[i] = path.join(pathname, pathnames[i])
						promises.push(traverseDirectory(pathnames[i], callback))
					}
					callback(pathname, stat, pathnames)
					resolve(Promise.all(promises))
				})
			}
			else {
				callback(pathname, stat)
				resolve(pathname)
			}
		})
	})
}

traverseDirectory(".", function(pathname) {
	if (pathname.match(/(?:^|\/)tests\/.*\.js$/)) {
		require(path.normalize(process.cwd()) + "/" + pathname) // eslint-disable-line global-require
	}
})
.then(function() {
	o.run(function(out) {
		out.failed.forEach(function(r) {
			console.error(r.test.context + ":\n" + highlight(r.test.message) + (r.stackTrace ? "\n\n" + r.stackTrace + "\n\n" : ""), hasProcess ? "" : "color:red", hasProcess ? "" : "color:black")
		})

		console.log(
			(out.name ? out.name + ": " : "") +
			out.results.length + " assertions completed in " + out.duration + "ms, " +
			"of which " + out.failed.length + " failed"
		)
		
		if (!out.result) process.exitCode = 1
	})
})
.catch(function(e) {
	console.log(e.stack)
})

process.on("unhandledRejection", function(e) {
	console.log("Uncaught (in promise) " + e.stack)
})
